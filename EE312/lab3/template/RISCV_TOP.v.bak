module RISCV_TOP (
	//General Signals
	input wire CLK,
	input wire RSTn,

	//I-Memory Signals
	output wire I_MEM_CSN,
	input wire [31:0] I_MEM_DI,//input from IM
	output reg [11:0] I_MEM_ADDR,//in byte address

	//D-Memory Signals
	output wire D_MEM_CSN,
	input wire [31:0] D_MEM_DI,
	output wire [31:0] D_MEM_DOUT,
	output wire [11:0] D_MEM_ADDR,//in word address
	output wire D_MEM_WEN,
	output wire [3:0] D_MEM_BE,

	//RegFile Signals
	output wire RF_WE,
	output wire [4:0] RF_RA1,
	output wire [4:0] RF_RA2,
	output wire [4:0] RF_WA1,
	input wire [31:0] RF_RD1,
	input wire [31:0] RF_RD2,
	output wire [31:0] RF_WD,
	output wire HALT,                   // if set, terminate program
	output reg [31:0] NUM_INST,         // number of instruction completed
	output wire [31:0] OUTPUT_PORT      // equal RF_WD this port is used for test
	);

	assign OUTPUT_PORT = RF_WD;

	initial begin
		NUM_INST <= 0;
	end

	// Only allow for NUM_INST
	always @ (negedge CLK) begin
		if (RSTn) NUM_INST <= NUM_INST + 1;
	end

	// TODO: implement

	//datapath variable
	reg [11:0] PCNext;
	wire [11:0] PCAdd;// PC + 4
	wire [31:0] ALUParam1;
	wire [31:0] ALUParam2;
	reg [31:0] ALUData;
	reg [31:0] Imm;
	reg [31:0] preResult;
	reg [31:0] Result;

	//control path varialbe
	reg PCSrc; // select next pc
	wire [3:0] InsInfo; // instruction 000~111
	reg [3:0] ALUOp; // ALU operation
	reg [2:0] ImmOp; //IPU operation
	reg [2:0] BitOp; //BOU operation
	wire ALUSrc1, ALUSrc2; // select sources of ALU
	wire RegSrc; // select a source of data to store in register
	wire SelData; // select data
	reg [1:0] preHalt; // see always block of "finalize"
	reg [11:0] SignalSet;
	reg [3:0] MemAccess;
	reg Eq; // equal
	reg Lt; // less than

	// HALT
	always@(*) begin
	case(I_MEM_DI)
	32'h00c00093: preHalt = 2'd1;
	32'h00008067:
	begin
	if(preHalt[0]) preHalt = 2'd3;
	else preHalt = 2'd0;
	end
	default: preHalt = 2'd0;
	endcase
	end

	assign HALT = (preHalt == 2'd3) ? 1 : 0;

	// Top control
	always@(*) begin
	casex({RSTn,I_MEM_DI[6:0]})
	8'b1_0110111: SignalSet = 12'b0_1x_1_0000_0_1x_1;//LUI
	8'b1_0010111: SignalSet = 12'b0_1x_1_0001_0_01_1;//AUIPC
	8'b1_1101111: SignalSet = 12'b0_1x_1_0010_1_01_1;//JAL
	8'b1_1100111: SignalSet = 12'b0_1x_1_0011_1_00_1;//JALR
	8'b1_1100011: SignalSet = 12'b0_1x_0_0100_0_01_1;//BEQ , BLT , BLTU(rs1 < rs2) , BGE , BGEU(rs1 >= rs2)
	8'b1_0000011: SignalSet = 12'b0_01_1_0101_0_00_0;//LB , LH , LW , LBU , LHU
	8'b1_0100011: SignalSet = 12'b0_00_0_0110_0_00_1;//SB , SH , SW
	8'b1_0010011: SignalSet = 12'b0_1x_1_1000_0_00_1;//ADDI , SLTI , SLTIU , XORI , ORI, ANDI , SLLI , SRLI , SRAI
	8'b1_0110011: SignalSet = 12'b0_1x_1_1001_0_10_1;//ADD , SUB , SLL , SLT , SLTU ,XOR , SRL , SRA , OR , AND
	default: SignalSet = 12'b0_1x_0_xxxx_x_xx_x;//Do nothing
	endcase
	end

	assign {D_MEM_CSN,D_MEM_WEN,RF_WE,InsInfo,RegSrc,ALUSrc2,ALUSrc1,SelData} = SignalSet[10:0];
	assign I_MEM_CSN = ~RSTn ? 0 : SignalSet[11];

	// ALU control
	always@(*) begin
	casex({InsInfo,I_MEM_DI[14:12]})
	7'b0000_xxx: ALUOp = 4'b1010; //Push ALUParam2
	7'b0001_xxx: ALUOp = 4'b0000; //ADD
	7'b001x_xxx: ALUOp = 4'b0000; //ADD
	7'b0100_00x: ALUOp = 4'b1011; //Branch - Equal
	7'b0100_10x: ALUOp = 4'b1100; //Branch - SLT
	7'b0100_11x: ALUOp = 4'b1101; //Branch - SLTU
	7'b0101_xxx: ALUOp = 4'b0000; //ADD
	7'b0110_xxx: ALUOp = 4'b0000; //ADD
	7'b1000_000: ALUOp = 4'b0000; //ADD
	7'b1001_000: begin
		     if(I_MEM_DI[31:25] == 7'b0100000) ALUOp = 4'b0001;//SUB
		     else ALUOp = 4'b0000;//ADD
		     end
	7'b1xxx_010: ALUOp = 4'b0011; //SLT
	7'b1xxx_011: ALUOp = 4'b0100; //SLTU
	7'b1xxx_100: ALUOp = 4'b0101; //XOR
	7'b1xxx_110: ALUOp = 4'b1000; //OR
	7'b1xxx_111: ALUOp = 4'b1001; //AND
	7'b1xxx_001: ALUOp = 4'b0010; //SLL
	7'b1xxx_101: begin
		     if(I_MEM_DI[31:25] == 7'b0100000) ALUOp = 4'b0111;//SRA
		     else ALUOp = 4'b0110;//SRL
		     end
	default: ALUOp = 4'b1111;
	endcase
	end

	//ALU Mux
	assign ALUParam2 = ALUSrc2 ? RF_RD2 : Imm;
	assign ALUParam1 = ALUSrc1 ? I_MEM_ADDR : RF_RD1;

	//ALU
	always@(*) begin
	case(ALUOp)
	4'b0000: ALUData = ALUParam1 + ALUParam2; //ADD
	4'b0001: ALUData = ALUParam1 - ALUParam2; //SUB
	4'b0010: ALUData = ALUParam1 << ALUParam2; //SLL
	4'b0011: ALUData = $signed(ALUParam1) < $signed(ALUParam2); // SLT
	4'b0100: ALUData = (ALUParam1 < ALUParam2); // SLTU
	4'b0101: ALUData = ALUParam1 ^ ALUParam2; //XOR
	4'b0110: ALUData = ALUParam1 >> ALUParam2; //SRL
	4'b0111: ALUData = $signed(ALUParam1) >>> ALUParam2; //SRA
	4'b1000: ALUData = ALUParam1 | ALUParam2; //OR
	4'b1001: ALUData = ALUParam1 & ALUParam2; //AND
	4'b1010: ALUData = ALUParam2; //Push ALUParam2
	4'b1011: begin
		 ALUData = ALUParam1 + ALUParam2;
		 Eq = (ALUParam1 == ALUParam2); // Equal
		 end
	4'b1100: begin
		 ALUData = ALUParam1 + ALUParam2;
		 Lt = $signed(ALUParam1) < $signed(ALUParam2);
		 end
	4'b1101: begin
		 ALUData = ALUParam1 + ALUParam2;
		 Lt = (ALUParam1 < ALUParam2);
		 end
	default: ALUData = ALUData;
	endcase
	end

	// Immediate produce unit Control
	always@(*) begin
	casex({InsInfo,I_MEM_DI[14:12]})
	7'b000x_xxx: ImmOp = 3'b000;
	7'b0010_xxx: ImmOp = 3'b001;
	7'b0011_xxx: ImmOp = 3'b010;
	7'b0100_xxx: ImmOp = 3'b011;
	7'b0101_xxx: ImmOp = 3'b010;
	7'b0110_xxx: ImmOp = 3'b100;
	7'b1000_0x0: ImmOp = 3'b010;
	7'b1000_011: ImmOp = 3'b010;
	7'b1000_100: ImmOp = 3'b010;
	7'b1000_11x: ImmOp = 3'b010;
	7'b1000_x01: ImmOp = 3'b101;
	default: ImmOp = 3'b111; //produce default Imm
	endcase
	end

	// Immediate produce unit (IPU)
	always@(*) begin
	case(ImmOp)
	3'b000: Imm = I_MEM_DI[31:12];
	3'b001: begin
		Imm = {I_MEM_DI[31],I_MEM_DI[19:12],I_MEM_DI[20],I_MEM_DI[30:21]};
		Imm = Imm << 12;
		Imm = $signed(Imm) >>> 11;
		end
	3'b010: begin
		Imm = I_MEM_DI[31:20];
		Imm = Imm << 20;
		Imm = $signed(Imm) >>> 20;
		end
	3'b011: begin
		Imm = {I_MEM_DI[31],I_MEM_DI[7],I_MEM_DI[30:25],I_MEM_DI[11:8]};
		Imm = Imm << 20;
		Imm = $signed(Imm) >>> 19;
		end
	3'b100: begin
		Imm = {I_MEM_DI[31:25],I_MEM_DI[11:7]};
		Imm = Imm << 20;
		Imm = $signed(Imm) >>> 20;
		end
	3'b101: Imm = I_MEM_DI[24:20];
	default: Imm = 32'd0;
	endcase
	end

	// Bit operation unit control
	always@(*) begin
	casex({InsInfo,I_MEM_DI[14:12]})
	7'b0011_xxx: BitOp = 3'b000;
	7'b0101_000: BitOp = 3'b011;
	7'b0101_001: BitOp = 3'b001;
	7'b0101_100: BitOp = 3'b100;
	7'b0101_101: BitOp = 3'b010;
	default: BitOp = 3'b111; // do nothing
	endcase
	end

	// Reg-Mem Mux
	always@(*) begin
	preResult = SelData ? ALUData : D_MEM_DI;
	end

	// Bit operation unit
	always@(*) begin
	case(BitOp)
	3'b000: Result = preResult & 32'hFFFFFFFE;
	3'b001: Result = $signed(preResult << 16) >> 16;
	3'b010: Result = (preResult << 16) >> 16;
	3'b011: Result = $signed(preResult << 24) >> 24;
	3'b100: Result = (preResult << 24) >> 24;
	default: Result = preResult;
	endcase
	end

	// memory store control
	always@(*) begin
	case({InsInfo,I_MEM_DI[14:12]})
	7'b0110_000: MemAccess = 4'b0001;
	7'b0110_001: MemAccess = 4'b0011;
	7'b0110_010: MemAccess = 4'b1111;
	default: MemAccess = 4'b0000;
	endcase
	end

	assign D_MEM_BE = MemAccess;

	// Next PC control
	always@(*) begin
	casex({InsInfo,I_MEM_DI[14:12]})
	7'b001x_xxx: PCSrc = 1'b1;
	7'b0100_000: PCSrc = Eq;
	7'b0100_001: PCSrc = ~Eq;
	7'b0100_1x0: PCSrc = Lt;
	7'b0100_1x1: PCSrc = ~Lt;
	default: PCSrc = 1'b0;
	endcase
	end

	// program counter
	always@(posedge CLK) begin
	I_MEM_ADDR = ~RSTn ? 0 : PCNext;
	end

	// PC Adder
	assign PCAdd = I_MEM_ADDR + 12'd4;

	// PC Mux
	always@(*) begin
	PCNext = PCSrc ? Result[11:0] : PCAdd;
	end

	// Reg Store Muc
	assign RF_WD = (InsInfo == 4'b0100) ? PCSrc : (RegSrc ? PCAdd : Result);

	// Reg Info
	assign RF_RA2 = I_MEM_DI[24:20];
	assign RF_RA1 = I_MEM_DI[19:15];
	assign RF_WA1 = I_MEM_DI[11:7];

	// Data to store MEM
	assign D_MEM_DOUT = RF_RD2;

	// Addr to store data in MEM
	assign D_MEM_ADDR = ALUData;

	// select ALU param
	assign ALUparam2 = ALUSrc2 ? RF_RD2 : Imm;
	assign ALUparam1 = ALUSrc1 ? I_MEM_ADDR : RF_RD1;


endmodule //
